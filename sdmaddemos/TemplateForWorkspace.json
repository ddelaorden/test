{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "sdmaddemos"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"SFTP_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SFTP'"
		},
		"sdmaddemos-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sdmaddemos-WorkspaceDefaultSqlServer'"
		},
		"SFTP_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "20.31.34.129"
		},
		"SFTP_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sftp"
		},
		"sdmaddemos-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sdmaddemos.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Europastry')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Europastry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Europastry",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CogerFichero": {
										"Directory": "upload",
										"File": "sample.csv"
									},
									"SFTPsink": {
										"Directory": "upload/procesados",
										"FileName": "x"
									},
									"SQLsink": {
										"TableName": "Europastry"
									}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Europastry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": true
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dedicated_table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Europastry"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SendCSVtoSFTP",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "upload/procesados/tablas",
									"FileName": {
										"value": "@concat('Europastry',string(utcnow()))",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Europastry')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/Dedicated_table')]",
				"[concat(variables('workspaceId'), '/datasets/SendCSVtoSFTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dedicated_table')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetCSVfromSFTP')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"File": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID; Codigo Tienda;Importe;Fecha",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SFTP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Merca_txt')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sdmaddemos-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "M11M2201.TXT",
						"fileSystem": "prueba"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/sdmaddemos-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace_ANALYTICS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "746d8f94-0ffe-4f2d-b2cd-b945863c94fe",
					"tenantID": "654623d6-1504-4f22-a146-b7c72637766a"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SFTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('SFTP_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('SFTP_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SFTP_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sdmaddemos-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sdmaddemos-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sdmaddemos-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sdmaddemos-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DFMerca')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Merca_txt",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dedicated_table",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(CodigoMerca = ltrim(substring(Column_1, 0, 3)),",
						"          FechaInicio = substring(Column_1, 4, 8),",
						"          FechaFin = substring(Column_1, 12, 8),",
						"          CodigoProducto = substring(Column_1, 20, 5),",
						"          CodigoProcedencia = substring(Column_1, 25, 3),",
						"          {Cantidad(kg)} = substring(Column_1, 28, 9),",
						"          PrecioFrecuente = substring(Column_1, 37, 9),",
						"          PrecioMaximo = substring(Column_1, 46, 8),",
						"          PrecioMinimo = substring(Column_1, 54, 8)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          CodigoMerca,",
						"          FechaInicio,",
						"          FechaFin,",
						"          CodigoProducto,",
						"          CodigoProcedencia,",
						"          {Cantidad(kg)},",
						"          PrecioFrecuente,",
						"          PrecioMaximo,",
						"          PrecioMinimo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CodigoMerca,",
						"          FechaInicio,",
						"          FechaFin,",
						"          CodigoProducto,",
						"          CodigoProcedencia,",
						"          Cantidad_KG = {Cantidad(kg)},",
						"          PrecioFrecuente,",
						"          PrecioMaximo,",
						"          PrecioMinimo",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Merca_txt')]",
				"[concat(variables('workspaceId'), '/datasets/Dedicated_table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Europastry')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GetCSVfromSFTP",
								"type": "DatasetReference"
							},
							"name": "CogerFichero"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SendCSVtoSFTP",
								"type": "DatasetReference"
							},
							"name": "SFTPsink"
						},
						{
							"dataset": {
								"referenceName": "Dedicated_table",
								"type": "DatasetReference"
							},
							"name": "SQLsink"
						}
					],
					"transformations": [
						{
							"name": "TransformDataTypes"
						},
						{
							"name": "AddDates"
						},
						{
							"name": "RemoveColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          { Codigo Tienda} as string,",
						"          Importe as double,",
						"          Fecha as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CogerFichero",
						"CogerFichero derive({Fecha-Hora} = toTimestamp(Fecha, 'dd/MM/yyyy')) ~> TransformDataTypes",
						"TransformDataTypes derive({Fecha-Hora Corregida} = iif({ Codigo Tienda} == 'A1', toTimestamp(Fecha, 'dd/MM/yyyy', 'GMT+5'), {Fecha-Hora}),",
						"          Fecha = toDate(Fecha, 'dd/MM/yyyy')) ~> AddDates",
						"AddDates select(mapColumn(",
						"          ID,",
						"          { Codigo Tienda},",
						"          Importe,",
						"          Fecha,",
						"          {Fecha-Hora Corregida}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
						"RemoveColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat(toString(currentUTC()),'.csv'))],",
						"     partitionBy('hash', 1)) ~> SFTPsink",
						"RemoveColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID,",
						"          { Codigo Tienda},",
						"          Importe,",
						"          Fecha,",
						"          {Fecha-Hora Corregida}",
						"     )) ~> SQLsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GetCSVfromSFTP')]",
				"[concat(variables('workspaceId'), '/datasets/SendCSVtoSFTP')]",
				"[concat(variables('workspaceId'), '/datasets/Dedicated_table')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CREATE AGENTS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Dedicated"
				},
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [dbo].[AGENTS]\n( \n\t[AGENT_CODE] [char](6)  NOT NULL,\n\t[AGENT_NAME] [char](40)  NULL,\n\t[WORKING_AREA] [char](35)  NULL,\n\t[COMMISSION] [real]  NULL,\n\t[PHONE_NO] [char](15)  NULL,\n\t[COUNTRY] [varchar](25)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tCLUSTERED COLUMNSTORE INDEX\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "on_demand",
						"poolName": "on_demand"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CREATE MERCA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Dedicated"
				},
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE TABLE [dbo].[MERCA]\n( \n\t[CodigoMerca] [nvarchar](max)  NULL,\n\t[FechaInicio] [nvarchar](max)  NULL,\n\t[FechaFin] [nvarchar](max)  NULL,\n\t[CodigoProducto] [nvarchar](max)  NULL,\n\t[CodigoProcedencia] [nvarchar](max)  NULL,\n\t[Cantidad_KG] [nvarchar](max)  NULL,\n\t[PrecioFrecuente] [nvarchar](max)  NULL,\n\t[PrecioMaximo] [nvarchar](max)  NULL,\n\t[PrecioMinimo] [nvarchar](max)  NULL\n)\nWITH\n(\n\tDISTRIBUTION = ROUND_ROBIN,\n\tHEAP\n)\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dedicated",
						"poolName": "dedicated"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DROP AGENTS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Dedicated"
				},
				"content": {
					"query": "DROP TABLE [dbo].[AGENTS]\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "on_demand",
						"poolName": "on_demand"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DROP MERCA')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Dedicated"
				},
				"content": {
					"query": "DROP TABLE [dbo].[MERCA]\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dedicated",
						"poolName": "dedicated"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/INSERT AGENTS')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Dedicated"
				},
				"content": {
					"query": "INSERT INTO AGENTS VALUES ('A007', 'Ramasundar', 'Bangalore', '0.15', '077-25814763', '');\nINSERT INTO AGENTS VALUES ('A003', 'Alex ', 'London', '0.13', '075-12458969', '');\nINSERT INTO AGENTS VALUES ('A008', 'Alford', 'New York', '0.12', '044-25874365', '');\nINSERT INTO AGENTS VALUES ('A011', 'Ravi Kumar', 'Bangalore', '0.15', '077-45625874', '');\nINSERT INTO AGENTS VALUES ('A010', 'Santakumar', 'Chennai', '0.14', '007-22388644', '');\nINSERT INTO AGENTS VALUES ('A012', 'Lucida', 'San Jose', '0.12', '044-52981425', '');\nINSERT INTO AGENTS VALUES ('A005', 'Anderson', 'Brisban', '0.13', '045-21447739', '');\nINSERT INTO AGENTS VALUES ('A001', 'Subbarao', 'Bangalore', '0.14', '077-12346674', '');\nINSERT INTO AGENTS VALUES ('A002', 'Mukesh', 'Mumbai', '0.11', '029-12358964', '');\nINSERT INTO AGENTS VALUES ('A006', 'McDen', 'London', '0.15', '078-22255588', '');\nINSERT INTO AGENTS VALUES ('A004', 'Ivan', 'Torento', '0.15', '008-22544166', '');\nINSERT INTO AGENTS VALUES ('A009', 'Benjamin', 'Hampshair', '0.11', '008-22536178', '');",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "on_demand",
						"poolName": "on_demand"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCTAXI')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NYCTAXI"
				},
				"content": {
					"query": "SELECT TOP 100 * FROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ride holiday')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NYCTAXI"
				},
				"content": {
					"query": "WITH taxi_rides AS\n(\n    SELECT\n        CAST([tpepPickupDateTime] AS DATE) AS [current_day],\n        COUNT(*) as rides_per_day\n    FROM  \n        OPENROWSET(\n            BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n            FORMAT='PARQUET'\n        ) AS [nyc]\n    WHERE nyc.filepath(1) = '2016'\n    GROUP BY CAST([tpepPickupDateTime] AS DATE)\n),\npublic_holidays AS\n(\n    SELECT\n        holidayname as holiday,\n        date\n    FROM\n        OPENROWSET(\n            BULK 'https://azureopendatastorage.blob.core.windows.net/holidaydatacontainer/Processed/*.parquet',\n            FORMAT='PARQUET'\n        ) AS [holidays]\n    WHERE countryorregion = 'United States' AND YEAR(date) = 2016\n)\nSELECT\n*\nFROM taxi_rides t\nLEFT OUTER JOIN public_holidays p on t.current_day = p.date\nORDER BY current_day ASC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rides per day')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NYCTAXI"
				},
				"content": {
					"query": "SELECT\n    CAST([tpepPickupDateTime] AS DATE) AS [current_day],\n    COUNT(*) as rides_per_day\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) = '2016'\nGROUP BY CAST([tpepPickupDateTime] AS DATE)\nORDER BY 1 ASC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rides per year')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "NYCTAXI"
				},
				"content": {
					"query": "SELECT\n    YEAR(tpepPickupDateTime) AS current_year,\n    COUNT(*) AS rides_per_year\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.parquet',\n        FORMAT='PARQUET'\n    ) AS [nyc]\nWHERE nyc.filepath(1) >= '2009' AND nyc.filepath(1) <= '2019'\nGROUP BY YEAR(tpepPickupDateTime)\nORDER BY 1 ASC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AGG STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "StormEvents\n| summarize event_count = count() by State",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/COLUMN CHART STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "StormEvents \n| summarize event_count=count(), mid = avg(BeginLat) by State \n| sort by mid\n| where event_count > 1800\n| project State, event_count\n| render columnchart",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/COUNT STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "StormEvents | count",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CREATE STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": ".create table StormEvents (\nStartTime: datetime, \nEndTime: datetime, \nEpisodeId: int, \nEventId: int, \nState: string, \nEventType: string, \nInjuriesDirect: int, \nInjuriesIndirect: int, \nDeathsDirect: int, \nDeathsIndirect: int, \nDamageProperty: int, \nDamageCrops: int, \nSource: string, \nBeginLocation: string, \nEndLocation: string, \nBeginLat: real, \nBeginLon: real, \nEndLat: real, \nEndLon: real, \nEpisodeNarrative: string, \nEventNarrative: string, \nStormSummary: dynamic)",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EXTEND STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "StormEvents\n| take 5\n| extend Duration = EndTime - StartTime \n| project StartTime, EndTime, Duration, EventType, State",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/INSERT STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": ".ingest into table StormEvents 'https://kustosamplefiles.blob.core.windows.net/samples/StormEvents.csv' with (ignoreFirstRecord=true)",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/JOIN STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "let LightningStorms = \n    StormEvents\n    | where EventType == \"Lightning\";\nlet AvalancheStorms = \n    StormEvents\n    | where EventType == \"Avalanche\";\nLightningStorms \n| join (AvalancheStorms) on State\n| distinct State",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LET STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "let LightningStorms = \n    StormEvents\n    | where EventType == \"Lightning\";\nLightningStorms ",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LINE CHART STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "StormEvents\n| summarize event_count=count() by bin(StartTime, 1d)\n| render timechart",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WHERE STORM_EVENTS')]",
			"type": "Microsoft.Synapse/workspaces/kqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "StormEvents\n| where StartTime > datetime(2007-02-01) and StartTime < datetime(2007-03-01)\n| where EventType == 'Flood' and State == 'CALIFORNIA'\n| project StartTime, EndTime , State , EventType , EpisodeNarrative",
					"metadata": {
						"language": "kql"
					},
					"currentConnection": {
						"poolName": "dedemo",
						"databaseName": "test"
					}
				},
				"type": "KqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCTAXI')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SampleSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d0c370ca-dbb7-458e-80a1-5c6afdc50a77"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"a3876007-215f-43be-8fd0-4d0cb322b919": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": "2.9553852937285994",
												"2": "4624873.580000004"
											},
											{
												"0": "6",
												"1": "3.0823106614325835",
												"2": "187660.31999999998"
											},
											{
												"0": "3",
												"1": "3.124120509875713",
												"2": "274744.52999999985"
											},
											{
												"0": "5",
												"1": "3.1096431007047065",
												"2": "314624.3600000001"
											},
											{
												"0": "9",
												"1": "6.23",
												"2": "49.84"
											},
											{
												"0": "4",
												"1": "3.132080374155551",
												"2": "126570.49999999999"
											},
											{
												"0": "8",
												"1": "7.831666666666667",
												"2": "46.99"
											},
											{
												"0": "7",
												"1": "2.382",
												"2": "11.91"
											},
											{
												"0": "2",
												"1": "3.198328131230063",
												"2": "1026740.0899999997"
											},
											{
												"0": "0",
												"1": "2.936587699848291",
												"2": "50327.24000000001"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "passengerCount",
												"type": "int"
											},
											{
												"key": "1",
												"name": "AvgTripDistance",
												"type": "double"
											},
											{
												"key": "2",
												"name": "SumTripDistance",
												"type": "double"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/aab15652-c938-4073-af8a-70635e111c18/resourceGroups/sdmadataplatform/providers/Microsoft.Synapse/workspaces/sdmaddemos/bigDataPools/SampleSpark",
						"name": "SampleSpark",
						"type": "Spark",
						"endpoint": "https://sdmaddemos.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							}
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"\r\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\r\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\r\n",
							"\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"df_nyc_tlc = nyc_tlc.to_spark_dataframe()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df_nyc_tlc.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as F\r\n",
							"df_nyc = df_nyc_tlc.groupBy(\"passengerCount\").agg(F.avg('tripDistance').alias('AvgTripDistance'), F.sum('tripDistance').alias('SumTripDistance'))\r\n",
							"display(df_nyc)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import matplotlib.pyplot\r\n",
							"import seaborn\r\n",
							"\r\n",
							"seaborn.set(style = \"whitegrid\")\r\n",
							"pdf_nyc = df_nyc.toPandas()\r\n",
							"seaborn.lineplot(x=\"passengerCount\", y=\"SumTripDistance\" , data = pdf_nyc)\r\n",
							"seaborn.lineplot(x=\"passengerCount\", y=\"AvgTripDistance\" , data = pdf_nyc)\r\n",
							"matplotlib.pyplot.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCTAXI_Copy1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SampleSpark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "5e2558bb-052b-4338-8b59-7b045803bc31"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"a3876007-215f-43be-8fd0-4d0cb322b919": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": "2.9553852937285994",
												"2": "4624873.580000004"
											},
											{
												"0": "6",
												"1": "3.0823106614325835",
												"2": "187660.31999999998"
											},
											{
												"0": "3",
												"1": "3.124120509875713",
												"2": "274744.52999999985"
											},
											{
												"0": "5",
												"1": "3.1096431007047065",
												"2": "314624.3600000001"
											},
											{
												"0": "9",
												"1": "6.23",
												"2": "49.84"
											},
											{
												"0": "4",
												"1": "3.132080374155551",
												"2": "126570.49999999999"
											},
											{
												"0": "8",
												"1": "7.831666666666667",
												"2": "46.99"
											},
											{
												"0": "7",
												"1": "2.382",
												"2": "11.91"
											},
											{
												"0": "2",
												"1": "3.198328131230063",
												"2": "1026740.0899999997"
											},
											{
												"0": "0",
												"1": "2.936587699848291",
												"2": "50327.24000000001"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "passengerCount",
												"type": "int"
											},
											{
												"key": "1",
												"name": "AvgTripDistance",
												"type": "double"
											},
											{
												"key": "2",
												"name": "SumTripDistance",
												"type": "double"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/aab15652-c938-4073-af8a-70635e111c18/resourceGroups/sdmadataplatform/providers/Microsoft.Synapse/workspaces/sdmaddemos/bigDataPools/SampleSpark",
						"name": "SampleSpark",
						"type": "Spark",
						"endpoint": "https://sdmaddemos.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SampleSpark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 8,
						"memory": 56,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							}
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"\r\n",
							"end_date = parser.parse('2018-05-08 00:00:00')\r\n",
							"start_date = parser.parse('2018-05-01 00:00:00')\r\n",
							"\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df_nyc_tlc.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import functions as F\r\n",
							"df_nyc = df_nyc_tlc.groupBy(\"passengerCount\").agg(F.avg('tripDistance').alias('AvgTripDistance'), F.sum('tripDistance').alias('SumTripDistance'))\r\n",
							"display(df_nyc)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import matplotlib.pyplot\r\n",
							"import seaborn\r\n",
							"\r\n",
							"seaborn.set(style = \"whitegrid\")\r\n",
							"pdf_nyc = df_nyc.toPandas()\r\n",
							"seaborn.lineplot(x=\"passengerCount\", y=\"SumTripDistance\" , data = pdf_nyc)\r\n",
							"seaborn.lineplot(x=\"passengerCount\", y=\"AvgTripDistance\" , data = pdf_nyc)\r\n",
							"matplotlib.pyplot.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SampleSpark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dedicated')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/delete')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/paused')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SendCSVtoSFTP')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SFTP"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SFTP')]"
			]
		}
	]
}